"""Add next_retry_at field to event_tasks

Revision ID: 2fe413eafb6d
Revises: d74a5e212bbf
Create Date: 2025-08-10 15:03:53.094125

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2fe413eafb6d'
down_revision = 'd74a5e212bbf'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_workers_id', table_name='workers')
    op.drop_table('workers')
    op.drop_index('ix_event_task_recoveries_id', table_name='event_task_recoveries')
    op.drop_table('event_task_recoveries')
    op.drop_index('ix_event_task_logs_id', table_name='event_task_logs')
    op.drop_table('event_task_logs')
    op.drop_index('ix_event_tasks_id', table_name='event_tasks')
    op.drop_index('ix_event_tasks_task_id', table_name='event_tasks')
    op.drop_table('event_tasks')
    op.alter_column('ai_models', 'inference_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='推理时间(ms)',
               existing_nullable=True)
    op.alter_column('ai_models', 'tags',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='标签列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('ai_models', 'description',
               existing_type=sa.TEXT(),
               comment='模型描述',
               existing_nullable=True)
    op.add_column('ai_service_logs', sa.Column('task_id', sa.Integer(), nullable=True, comment='AI任务ID'))
    op.alter_column('ai_tasks', 'status',
               existing_type=postgresql.ENUM('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='aitaskstatus'),
               nullable=True,
               existing_comment='任务状态',
               existing_server_default=sa.text("'PENDING'::aitaskstatus"))
    op.alter_column('diagnosis_tasks', 'task_type',
               existing_type=postgresql.ENUM('DIAGNOSIS', 'AI_DETECTION', 'MONITORING', 'MAINTENANCE', name='tasktype'),
               nullable=True,
               comment='任务类型',
               existing_server_default=sa.text("'DIAGNOSIS'::tasktype"))
    op.alter_column('diagnosis_tasks', 'assigned_worker',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               comment='分配的worker节点ID',
               existing_comment='分配的Worker节点ID',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('diagnosis_tasks', 'assigned_worker',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               comment='分配的Worker节点ID',
               existing_comment='分配的worker节点ID',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'task_type',
               existing_type=postgresql.ENUM('DIAGNOSIS', 'AI_DETECTION', 'MONITORING', 'MAINTENANCE', name='tasktype'),
               nullable=False,
               comment=None,
               existing_comment='任务类型',
               existing_server_default=sa.text("'DIAGNOSIS'::tasktype"))
    op.alter_column('ai_tasks', 'status',
               existing_type=postgresql.ENUM('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='aitaskstatus'),
               nullable=False,
               existing_comment='任务状态',
               existing_server_default=sa.text("'PENDING'::aitaskstatus"))
    op.drop_column('ai_service_logs', 'task_id')
    op.alter_column('ai_models', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='模型描述',
               existing_nullable=True)
    op.alter_column('ai_models', 'tags',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='标签列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('ai_models', 'inference_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='推理时间(ms)',
               existing_nullable=True)
    op.create_table('event_tasks',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('event_tasks_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='任务唯一标识'),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='任务名称'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='任务描述'),
    sa.Column('task_type', postgresql.ENUM('CONTINUOUS', 'SCHEDULED', 'TRIGGERED', name='eventtasktype'), autoincrement=False, nullable=True, comment='任务类型'),
    sa.Column('status', postgresql.ENUM('PENDING', 'RUNNING', 'STOPPED', 'FAILED', 'PAUSED', name='eventtaskstatus'), autoincrement=False, nullable=True, comment='任务状态'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='是否启用'),
    sa.Column('ai_service_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='AI服务ID'),
    sa.Column('camera_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='摄像头ID'),
    sa.Column('camera_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='摄像头名称'),
    sa.Column('algorithm_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='算法ID'),
    sa.Column('algorithm_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='算法名称'),
    sa.Column('model_id', sa.INTEGER(), autoincrement=False, nullable=True, comment='模型ID'),
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='模型名称'),
    sa.Column('detection_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='检测配置参数'),
    sa.Column('roi_areas', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='感兴趣区域'),
    sa.Column('alarm_threshold', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='告警阈值'),
    sa.Column('schedule_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='调度配置'),
    sa.Column('check_interval', sa.INTEGER(), autoincrement=False, nullable=True, comment='检测间隔(秒)'),
    sa.Column('assigned_worker', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='分配的Worker节点ID'),
    sa.Column('worker_heartbeat', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Worker心跳时间'),
    sa.Column('total_detections', sa.INTEGER(), autoincrement=False, nullable=True, comment='总检测次数'),
    sa.Column('success_detections', sa.INTEGER(), autoincrement=False, nullable=True, comment='成功检测次数'),
    sa.Column('failed_detections', sa.INTEGER(), autoincrement=False, nullable=True, comment='失败检测次数'),
    sa.Column('total_events', sa.INTEGER(), autoincrement=False, nullable=True, comment='总事件数'),
    sa.Column('avg_processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='平均处理时间(ms)'),
    sa.Column('last_detection_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='最后检测时间'),
    sa.Column('last_event_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='最后事件时间'),
    sa.Column('last_error', sa.TEXT(), autoincrement=False, nullable=True, comment='最后错误信息'),
    sa.Column('error_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='错误次数'),
    sa.Column('auto_recovery', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='是否自动恢复'),
    sa.Column('max_retry_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='最大重试次数'),
    sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='当前重试次数'),
    sa.Column('recovery_interval', sa.INTEGER(), autoincrement=False, nullable=True, comment='恢复间隔(秒)'),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='启动时间'),
    sa.Column('stopped_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='停止时间'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='更新时间'),
    sa.Column('created_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='创建人ID'),
    sa.Column('task_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='扩展元数据'),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='标签列表'),
    sa.ForeignKeyConstraint(['ai_service_id'], ['ai_services.id'], name='event_tasks_ai_service_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='event_tasks_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_event_tasks_task_id', 'event_tasks', ['task_id'], unique=False)
    op.create_index('ix_event_tasks_id', 'event_tasks', ['id'], unique=False)
    op.create_table('event_task_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='任务ID'),
    sa.Column('log_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='日志类型: start, stop, detection, error, recovery'),
    sa.Column('log_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='日志级别'),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False, comment='日志消息'),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='详细信息'),
    sa.Column('worker_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='执行的Worker ID'),
    sa.Column('processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='处理时间(ms)'),
    sa.Column('detection_result', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='检测结果'),
    sa.Column('event_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='检测到的事件数量'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='创建时间'),
    sa.ForeignKeyConstraint(['task_id'], ['event_tasks.id'], name='event_task_logs_task_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='event_task_logs_pkey')
    )
    op.create_index('ix_event_task_logs_id', 'event_task_logs', ['id'], unique=False)
    op.create_table('event_task_recoveries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='任务ID'),
    sa.Column('recovery_reason', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='恢复原因'),
    sa.Column('failure_reason', sa.TEXT(), autoincrement=False, nullable=True, comment='失败原因'),
    sa.Column('recovery_action', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='恢复动作'),
    sa.Column('is_successful', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='是否恢复成功'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='恢复错误信息'),
    sa.Column('failure_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='失败时间'),
    sa.Column('recovery_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='恢复时间'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='创建时间'),
    sa.ForeignKeyConstraint(['task_id'], ['event_tasks.id'], name='event_task_recoveries_task_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='event_task_recoveries_pkey')
    )
    op.create_index('ix_event_task_recoveries_id', 'event_task_recoveries', ['id'], unique=False)
    op.create_table('workers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('worker_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Worker唯一标识'),
    sa.Column('host', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='主机地址'),
    sa.Column('port', sa.INTEGER(), autoincrement=False, nullable=False, comment='端口号'),
    sa.Column('max_concurrent_tasks', sa.INTEGER(), autoincrement=False, nullable=True, comment='最大并发任务数'),
    sa.Column('current_tasks', sa.INTEGER(), autoincrement=False, nullable=True, comment='当前任务数'),
    sa.Column('capabilities', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='支持的能力列表'),
    sa.Column('status', postgresql.ENUM('ONLINE', 'OFFLINE', 'BUSY', 'ERROR', 'MAINTENANCE', name='workerstatus'), autoincrement=False, nullable=True, comment='Worker状态'),
    sa.Column('last_heartbeat', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='最后心跳时间'),
    sa.Column('total_tasks_processed', sa.INTEGER(), autoincrement=False, nullable=True, comment='总处理任务数'),
    sa.Column('successful_tasks', sa.INTEGER(), autoincrement=False, nullable=True, comment='成功任务数'),
    sa.Column('failed_tasks', sa.INTEGER(), autoincrement=False, nullable=True, comment='失败任务数'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='更新时间'),
    sa.PrimaryKeyConstraint('id', name='workers_pkey'),
    sa.UniqueConstraint('worker_id', name='workers_worker_id_key')
    )
    op.create_index('ix_workers_id', 'workers', ['id'], unique=False)
    # ### end Alembic commands ###