"""Add missing fields to AIService and AIServiceLog models

Revision ID: 56f3ac08cdef
Revises: f59228b0d234
Create Date: 2025-07-21 19:47:33.058451

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '56f3ac08cdef'
down_revision = 'f59228b0d234'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_user_roles_id', table_name='user_roles')
    op.drop_table('user_roles')
    op.drop_index('ix_permissions_id', table_name='permissions')
    op.drop_index('ix_permissions_name', table_name='permissions')
    op.drop_table('permissions')
    op.drop_index('ix_roles_id', table_name='roles')
    op.drop_index('ix_roles_name', table_name='roles')
    op.drop_table('roles')
    op.add_column('ai_service_logs', sa.Column('status', sa.String(length=20), nullable=True, comment='请求状态'))
    op.add_column('ai_service_logs', sa.Column('response_time', sa.Float(), nullable=True, comment='响应时间(ms)'))
    op.add_column('ai_services', sa.Column('model_id', sa.Integer(), nullable=True, comment='模型ID'))
    op.add_column('ai_services', sa.Column('endpoint_url', sa.String(length=500), nullable=True, comment='服务端点URL'))
    op.add_column('ai_services', sa.Column('api_key', sa.String(length=200), nullable=True, comment='API密钥'))
    op.add_column('ai_services', sa.Column('timeout_seconds', sa.Integer(), nullable=True, comment='超时时间(秒)'))
    op.add_column('ai_services', sa.Column('retry_count', sa.Integer(), nullable=True, comment='重试次数'))
    op.add_column('ai_services', sa.Column('status', sa.Enum('STOPPED', 'RUNNING', 'PAUSED', 'ERROR', 'STARTING', 'STOPPING', name='servicestatus'), nullable=True, comment='服务状态'))
    op.add_column('ai_services', sa.Column('max_concurrent_requests', sa.Integer(), nullable=True, comment='最大并发请求数'))
    op.add_column('ai_services', sa.Column('current_requests', sa.Integer(), nullable=True, comment='当前请求数'))
    op.add_column('ai_services', sa.Column('total_requests', sa.Integer(), nullable=True, comment='总请求数'))
    op.add_column('ai_services', sa.Column('success_requests', sa.Integer(), nullable=True, comment='成功请求数'))
    op.add_column('ai_services', sa.Column('failed_requests', sa.Integer(), nullable=True, comment='失败请求数'))
    op.add_column('ai_services', sa.Column('avg_response_time', sa.Float(), nullable=True, comment='平均响应时间(ms)'))
    op.add_column('ai_services', sa.Column('last_heartbeat', sa.DateTime(timezone=True), nullable=True, comment='最后心跳时间'))
    op.alter_column('diagnosis_alarms', 'result_id',
               existing_type=sa.INTEGER(),
               comment='诊断结果ID',
               existing_nullable=False)
    op.alter_column('diagnosis_alarms', 'alarm_type',
               existing_type=sa.VARCHAR(length=50),
               comment='告警类型',
               existing_nullable=False)
    op.alter_column('diagnosis_alarms', 'severity',
               existing_type=sa.VARCHAR(length=20),
               comment='严重程度',
               existing_nullable=True,
               existing_server_default=sa.text("'warning'::character varying"))
    op.alter_column('diagnosis_alarms', 'title',
               existing_type=sa.VARCHAR(length=200),
               comment='告警标题',
               existing_nullable=False)
    op.alter_column('diagnosis_alarms', 'description',
               existing_type=sa.TEXT(),
               comment='告警描述',
               existing_nullable=True)
    op.alter_column('diagnosis_alarms', 'threshold_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='阈值配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_alarms', 'current_value',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               comment='当前值',
               existing_nullable=True)
    op.alter_column('diagnosis_alarms', 'threshold_value',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               comment='阈值',
               existing_nullable=True)
    op.alter_column('diagnosis_alarms', 'is_acknowledged',
               existing_type=sa.BOOLEAN(),
               comment='是否已确认',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('diagnosis_alarms', 'acknowledged_by',
               existing_type=sa.INTEGER(),
               comment='确认人ID',
               existing_nullable=True)
    op.alter_column('diagnosis_alarms', 'acknowledged_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='确认时间',
               existing_nullable=True)
    op.alter_column('diagnosis_alarms', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_diagnosis_alarms_id'), 'diagnosis_alarms', ['id'], unique=False)
    op.alter_column('diagnosis_results', 'task_id',
               existing_type=sa.INTEGER(),
               comment='诊断任务ID',
               existing_nullable=False)
    op.alter_column('diagnosis_results', 'camera_id',
               existing_type=sa.INTEGER(),
               comment='摄像头ID',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'camera_name',
               existing_type=sa.VARCHAR(length=100),
               comment='摄像头名称',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'diagnosis_type',
               existing_type=sa.VARCHAR(length=50),
               comment='诊断类型',
               existing_nullable=True)
    # First create the enum type if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'diagnosisstatus') THEN
                CREATE TYPE diagnosisstatus AS ENUM ('NORMAL', 'WARNING', 'ERROR', 'CRITICAL');
            END IF;
        END
        $$;
    """)
    
    # Then alter the column with USING clause for type conversion
    op.execute("""
        ALTER TABLE diagnosis_results 
        ALTER COLUMN diagnosis_status 
        TYPE diagnosisstatus 
        USING diagnosis_status::diagnosisstatus
    """)
    
    # Add comment
    op.alter_column('diagnosis_results', 'diagnosis_status',
               comment='诊断状态',
               existing_nullable=False)
    op.alter_column('diagnosis_results', 'score',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               comment='诊断分数',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'threshold',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               comment='阈值',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'is_abnormal',
               existing_type=sa.BOOLEAN(),
               comment='是否异常',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('diagnosis_results', 'image_url',
               existing_type=sa.VARCHAR(length=500),
               comment='图像URL',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'thumbnail_url',
               existing_type=sa.VARCHAR(length=500),
               comment='缩略图URL',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'image_timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='图像时间戳',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'processing_time',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               comment='处理时间(ms)',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'error_message',
               existing_type=sa.TEXT(),
               comment='错误信息',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'suggestions',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='建议',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('diagnosis_results', 'metrics',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='指标数据',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_results', 'result_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='详细结果数据',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_results', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_diagnosis_results_id'), 'diagnosis_results', ['id'], unique=False)
    op.alter_column('diagnosis_statistics', 'date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='统计日期',
               existing_nullable=False)
    op.alter_column('diagnosis_statistics', 'camera_id',
               existing_type=sa.INTEGER(),
               comment='摄像头ID',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'diagnosis_type',
               existing_type=sa.VARCHAR(length=50),
               comment='诊断类型',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'total_checks',
               existing_type=sa.INTEGER(),
               comment='总检查次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_statistics', 'normal_count',
               existing_type=sa.INTEGER(),
               comment='正常次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_statistics', 'warning_count',
               existing_type=sa.INTEGER(),
               comment='警告次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_statistics', 'error_count',
               existing_type=sa.INTEGER(),
               comment='错误次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_statistics', 'critical_count',
               existing_type=sa.INTEGER(),
               comment='严重次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_statistics', 'avg_score',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               comment='平均分数',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'min_score',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               comment='最低分数',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'max_score',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               comment='最高分数',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'avg_processing_time',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               comment='平均处理时间',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_statistics', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='更新时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_diagnosis_statistics_id'), 'diagnosis_statistics', ['id'], unique=False)
    op.alter_column('diagnosis_tasks', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='任务名称',
               existing_nullable=False)
    op.alter_column('diagnosis_tasks', 'description',
               existing_type=sa.TEXT(),
               comment='任务描述',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'camera_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='摄像头ID列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('diagnosis_tasks', 'camera_groups',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='摄像头组列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('diagnosis_tasks', 'diagnosis_types',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='诊断类型列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('diagnosis_tasks', 'diagnosis_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='诊断配置参数',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_tasks', 'schedule_type',
               existing_type=sa.VARCHAR(length=50),
               comment='调度类型',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'schedule_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='调度配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_tasks', 'cron_expression',
               existing_type=sa.VARCHAR(length=100),
               comment='Cron表达式',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'interval_minutes',
               existing_type=sa.INTEGER(),
               comment='间隔分钟数',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'threshold_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='阈值配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    # 修改 diagnosis_tasks 表的 status 列类型
    op.execute("ALTER TABLE diagnosis_tasks ALTER COLUMN status DROP DEFAULT")
    op.execute("ALTER TABLE diagnosis_tasks ALTER COLUMN status TYPE taskstatus USING status::taskstatus")
    op.execute("ALTER TABLE diagnosis_tasks ALTER COLUMN status SET DEFAULT 'PENDING'::taskstatus")
    op.alter_column('diagnosis_tasks', 'status',
               existing_type=sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='taskstatus'),
               comment='任务状态',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='是否启用',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('diagnosis_tasks', 'last_run_time',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='最后执行时间',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'next_run_time',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='下次执行时间',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'total_runs',
               existing_type=sa.INTEGER(),
               comment='总执行次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_tasks', 'success_runs',
               existing_type=sa.INTEGER(),
               comment='成功执行次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_tasks', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='更新时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_tasks', 'created_by',
               existing_type=sa.VARCHAR(length=50),
               comment='创建人ID',
               existing_nullable=True)
    op.create_index(op.f('ix_diagnosis_tasks_id'), 'diagnosis_tasks', ['id'], unique=False)
    op.alter_column('diagnosis_templates', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='模板名称',
               existing_nullable=False)
    op.alter_column('diagnosis_templates', 'description',
               existing_type=sa.TEXT(),
               comment='模板描述',
               existing_nullable=True)
    op.alter_column('diagnosis_templates', 'diagnosis_types',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='诊断类型列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('diagnosis_templates', 'default_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='默认配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_templates', 'default_schedule',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='默认调度配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_templates', 'threshold_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='阈值配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_templates', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='是否启用',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('diagnosis_templates', 'is_system',
               existing_type=sa.BOOLEAN(),
               comment='是否系统模板',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('diagnosis_templates', 'usage_count',
               existing_type=sa.INTEGER(),
               comment='使用次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_templates', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_templates', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='更新时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_templates', 'created_by',
               existing_type=sa.VARCHAR(length=50),
               comment='创建人ID',
               existing_nullable=True)
    op.create_index(op.f('ix_diagnosis_templates_id'), 'diagnosis_templates', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_diagnosis_templates_id'), table_name='diagnosis_templates')
    op.alter_column('diagnosis_templates', 'created_by',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='创建人ID',
               existing_nullable=True)
    op.alter_column('diagnosis_templates', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_templates', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_templates', 'usage_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='使用次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_templates', 'is_system',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否系统模板',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('diagnosis_templates', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否启用',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('diagnosis_templates', 'threshold_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='阈值配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_templates', 'default_schedule',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='默认调度配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_templates', 'default_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='默认配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_templates', 'diagnosis_types',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='诊断类型列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('diagnosis_templates', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='模板描述',
               existing_nullable=True)
    op.alter_column('diagnosis_templates', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='模板名称',
               existing_nullable=False)
    op.drop_index(op.f('ix_diagnosis_tasks_id'), table_name='diagnosis_tasks')
    op.alter_column('diagnosis_tasks', 'created_by',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='创建人ID',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_tasks', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_tasks', 'success_runs',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='成功执行次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_tasks', 'total_runs',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='总执行次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_tasks', 'next_run_time',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='下次执行时间',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'last_run_time',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='最后执行时间',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否启用',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('diagnosis_tasks', 'status',
               existing_type=sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='taskstatus'),
               type_=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='任务状态',
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('diagnosis_tasks', 'threshold_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='阈值配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_tasks', 'interval_minutes',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='间隔分钟数',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'cron_expression',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Cron表达式',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'schedule_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='调度配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_tasks', 'schedule_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='调度类型',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'diagnosis_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='诊断配置参数',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_tasks', 'diagnosis_types',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='诊断类型列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('diagnosis_tasks', 'camera_groups',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='摄像头组列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('diagnosis_tasks', 'camera_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='摄像头ID列表',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('diagnosis_tasks', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='任务描述',
               existing_nullable=True)
    op.alter_column('diagnosis_tasks', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='任务名称',
               existing_nullable=False)
    op.drop_index(op.f('ix_diagnosis_statistics_id'), table_name='diagnosis_statistics')
    op.alter_column('diagnosis_statistics', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_statistics', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_statistics', 'avg_processing_time',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               comment=None,
               existing_comment='平均处理时间',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'max_score',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               comment=None,
               existing_comment='最高分数',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'min_score',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               comment=None,
               existing_comment='最低分数',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'avg_score',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               comment=None,
               existing_comment='平均分数',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'critical_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='严重次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_statistics', 'error_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='错误次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_statistics', 'warning_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='警告次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_statistics', 'normal_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='正常次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_statistics', 'total_checks',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='总检查次数',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('diagnosis_statistics', 'diagnosis_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='诊断类型',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'camera_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='摄像头ID',
               existing_nullable=True)
    op.alter_column('diagnosis_statistics', 'date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='统计日期',
               existing_nullable=False)
    op.drop_index(op.f('ix_diagnosis_results_id'), table_name='diagnosis_results')
    op.alter_column('diagnosis_results', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_results', 'result_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='详细结果数据',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_results', 'metrics',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='指标数据',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_results', 'suggestions',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='建议',
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::json"))
    op.alter_column('diagnosis_results', 'error_message',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='错误信息',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'processing_time',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               comment=None,
               existing_comment='处理时间(ms)',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'image_timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='图像时间戳',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'thumbnail_url',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='缩略图URL',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'image_url',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='图像URL',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'is_abnormal',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否异常',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('diagnosis_results', 'threshold',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               comment=None,
               existing_comment='阈值',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'score',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               comment=None,
               existing_comment='诊断分数',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'diagnosis_status',
               existing_type=sa.Enum('NORMAL', 'WARNING', 'ERROR', 'CRITICAL', name='diagnosisstatus'),
               type_=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='诊断状态',
               existing_nullable=False)
    op.alter_column('diagnosis_results', 'diagnosis_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='诊断类型',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'camera_name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='摄像头名称',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'camera_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='摄像头ID',
               existing_nullable=True)
    op.alter_column('diagnosis_results', 'task_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='诊断任务ID',
               existing_nullable=False)
    op.drop_index(op.f('ix_diagnosis_alarms_id'), table_name='diagnosis_alarms')
    op.alter_column('diagnosis_alarms', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('diagnosis_alarms', 'acknowledged_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='确认时间',
               existing_nullable=True)
    op.alter_column('diagnosis_alarms', 'acknowledged_by',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='确认人ID',
               existing_nullable=True)
    op.alter_column('diagnosis_alarms', 'is_acknowledged',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否已确认',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('diagnosis_alarms', 'threshold_value',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               comment=None,
               existing_comment='阈值',
               existing_nullable=True)
    op.alter_column('diagnosis_alarms', 'current_value',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               comment=None,
               existing_comment='当前值',
               existing_nullable=True)
    op.alter_column('diagnosis_alarms', 'threshold_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='阈值配置',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('diagnosis_alarms', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='告警描述',
               existing_nullable=True)
    op.alter_column('diagnosis_alarms', 'title',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='告警标题',
               existing_nullable=False)
    op.alter_column('diagnosis_alarms', 'severity',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='严重程度',
               existing_nullable=True,
               existing_server_default=sa.text("'warning'::character varying"))
    op.alter_column('diagnosis_alarms', 'alarm_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='告警类型',
               existing_nullable=False)
    op.alter_column('diagnosis_alarms', 'result_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='诊断结果ID',
               existing_nullable=False)
    op.drop_column('ai_services', 'last_heartbeat')
    op.drop_column('ai_services', 'avg_response_time')
    op.drop_column('ai_services', 'failed_requests')
    op.drop_column('ai_services', 'success_requests')
    op.drop_column('ai_services', 'total_requests')
    op.drop_column('ai_services', 'current_requests')
    op.drop_column('ai_services', 'max_concurrent_requests')
    op.drop_column('ai_services', 'status')
    op.drop_column('ai_services', 'retry_count')
    op.drop_column('ai_services', 'timeout_seconds')
    op.drop_column('ai_services', 'api_key')
    op.drop_column('ai_services', 'endpoint_url')
    op.drop_column('ai_services', 'model_id')
    op.drop_column('ai_service_logs', 'response_time')
    op.drop_column('ai_service_logs', 'status')
    op.create_table('roles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('roles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='角色名称'),
    sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='显示名称'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='角色描述'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='是否启用'),
    sa.Column('is_system', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='是否系统角色'),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='角色权限列表'),
    sa.Column('page_permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='页面权限配置'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='更新时间'),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_roles_name', 'roles', ['name'], unique=False)
    op.create_index('ix_roles_id', 'roles', ['id'], unique=False)
    op.create_table('permissions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='权限名称'),
    sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='显示名称'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='权限描述'),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='权限分类'),
    sa.Column('module', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='所属模块'),
    sa.Column('permission_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='权限类型'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='是否启用'),
    sa.Column('is_system', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='是否系统权限'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='更新时间'),
    sa.PrimaryKeyConstraint('id', name='permissions_pkey')
    )
    op.create_index('ix_permissions_name', 'permissions', ['name'], unique=False)
    op.create_index('ix_permissions_id', 'permissions', ['id'], unique=False)
    op.create_table('user_roles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='用户ID'),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False, comment='角色ID'),
    sa.Column('assigned_by', sa.INTEGER(), autoincrement=False, nullable=True, comment='分配者ID'),
    sa.Column('assigned_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='分配时间'),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='过期时间'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='是否有效'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='更新时间'),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], name='user_roles_assigned_by_fkey'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='user_roles_role_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_roles_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_roles_pkey')
    )
    op.create_index('ix_user_roles_id', 'user_roles', ['id'], unique=False)
    # ### end Alembic commands ###